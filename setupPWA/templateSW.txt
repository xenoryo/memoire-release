const staticCacheName = 'site-static';
const dynamicCacheName = 'site-dynamic';
const assets = [
$1
];

self.addEventListener('install', evt => {
  evt.waitUntil(
    caches.open(staticCacheName).then((cache) => {
      cache.addAll(assets);
    })
  );
});
self.addEventListener('activate', evt => {
  console.log('app's service worker activated');
});

self.addEventListener('fetch', evt => {

  var requestURL = new URL(evt.request.url);
  var isHtmlRequest = new RegExp(".html");

  if (requestURL.origin == location.origin) {
    if (isHtmlRequest.test(requestURL.pathname)) {
      evt.respondWith(
          fetch(evt.request).then(function(fetchResponse) {
            return caches.open(staticCacheName).then(cache => {
                cache.delete(evt.request.url);
                cache.put(evt.request.url, fetchResponse.clone())
                return fetchResponse;
            })
        }).catch((x) => {
            return caches.match(evt.request);
        })

      );
  
    }
      else{
        evt.respondWith(
          caches.match(evt.request).then(cacheRes => {
            return cacheRes || fetch(evt.request);
          })
        );
      }
  }
  else{
        evt.respondWith(
          caches.match(evt.request).then(cacheRes => {
            return cacheRes || fetch(evt.request);
          })
        );
      }
  /*else{
    evt.respondWith(
      caches.match(evt.request).then(cacheRes => {
        return cacheRes || fetch(evt.request).then(fetchRes => {
          return caches.open(dynamicCacheName).then(cache => {
            cache.put(evt.request.url, fetchRes.clone());
            return fetchRes;
          })
        });
      })
    );
  }*/


});