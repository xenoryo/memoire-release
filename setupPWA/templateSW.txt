const staticCache = 'app-static-v1';
const assets = [
$1
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(staticCache).then((cache) => {
      cache.addAll(assets);
    })
  );
  console.log("app service worker installed")
});
self.addEventListener('activate', event => {

  event.waitUntil(
    caches.keys().then(keys => {
      return Promise.all(keys
        .filter(key => key !== staticCache)
        .map(key => caches.delete(key))
      );
    })
  );
  console.log("app service worker activated")
});

self.addEventListener('fetch', event => {

 
	var requestURL = new URL(event.request.url);
  	var isHtmlRequest = new RegExp(".html");

  	if (requestURL.origin == location.origin) {
    	if (isHtmlRequest.test(requestURL.pathname)) {
      		event.respondWith(
          	fetch(event.request).then(function(fetchResponse) {
				return caches.open(staticCache).then(cache => {
					cache.delete(event.request.url);
					cache.put(event.request.url, fetchResponse.clone())
					return fetchResponse;
				})
				}).catch((x) => {
					return caches.match(event.request);
				})

			);
  
		}
		else{
			event.respondWith(
				caches.match(event.request).then(cacheRes => {
					return cacheRes || fetch(event.request);
				})
			);
		}
	}
	else{
        event.respondWith(
          caches.match(event.request).then(cacheRes => {
            return cacheRes || fetch(event.request);
			})
        );
     }

});


